// <auto-generated />
using System;
using Financeiro.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Financeiro.Infrastructure.Migrations
{
    [DbContext(typeof(FinanceiroDbContext))]
    partial class FinanceiroDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Financeiro.Domain.Entidades.Banco", b =>
                {
                    b.Property<Guid>("IdBanco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodigoBanco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeBanco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdBanco");

                    b.ToTable("Bancos");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Categoria", b =>
                {
                    b.Property<Guid>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeCategoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Conta", b =>
                {
                    b.Property<Guid>("IdConta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdBanco")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.Property<string>("NumeroConta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdConta");

                    b.HasIndex("IdBanco");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Contas");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Lancamento", b =>
                {
                    b.Property<Guid>("IdLancamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdConta")
                        .HasColumnType("uuid");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("IdLancamento");

                    b.HasIndex("IdConta");

                    b.ToTable("Lancamentos");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.LancamentoXtransacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdLancamento")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTransacao")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IdLancamento");

                    b.HasIndex("IdTransacao");

                    b.ToTable("LancamentosXtransacoes");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Transacao", b =>
                {
                    b.Property<Guid>("IdTransacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdCategoria")
                        .HasColumnType("uuid");

                    b.HasKey("IdTransacao");

                    b.HasIndex("IdCategoria");

                    b.ToTable("Transacoes");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Conta", b =>
                {
                    b.HasOne("Financeiro.Domain.Entidades.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("IdBanco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Financeiro.Domain.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Lancamento", b =>
                {
                    b.HasOne("Financeiro.Domain.Entidades.Conta", "Conta")
                        .WithMany()
                        .HasForeignKey("IdConta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conta");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.LancamentoXtransacao", b =>
                {
                    b.HasOne("Financeiro.Domain.Entidades.Lancamento", "Lancamento")
                        .WithMany()
                        .HasForeignKey("IdLancamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Financeiro.Domain.Entidades.Transacao", "Transacao")
                        .WithMany()
                        .HasForeignKey("IdTransacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lancamento");

                    b.Navigation("Transacao");
                });

            modelBuilder.Entity("Financeiro.Domain.Entidades.Transacao", b =>
                {
                    b.HasOne("Financeiro.Domain.Entidades.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });
#pragma warning restore 612, 618
        }
    }
}
